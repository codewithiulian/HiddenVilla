@page "/lifecycle"
@using System.Threading

<h3>Lifecycle</h3>

<div class="border">
    <LifecycleComponent CounterValue="@currentCount"></LifecycleComponent>
</div>

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button> <br />
@Count <button class="btn btn-primary" @onclick="StartCountdown">Start countdown</button>


<div class="col-6">
    <table class="table table-sm table-bordered">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Event</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < EventType.Count; i++)
            {
                <tr>
                    <td scope="row">@(i+1)</td>
                    <td scope="row">@EventType[i]</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private int currentCount = 0;
    private List<string> EventType = new List<string>();
    public int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync called");
        await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync called");
        await Task.Delay(1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add("OnAfterRender called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync called");
        await Task.Delay(1000);
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}

